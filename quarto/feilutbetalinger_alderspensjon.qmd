---
title: "Analyse av feilutbetalinger til døde alderspensjonister"
jupyter: python3
execute:
    echo: false
    warning: false
    include: true
format:
    dashboard:
        embed-resources: true
        code-copy: true
        theme: flatly
        scrolling: true
---

```{python}
#| include: false
import os
import json
import oracledb
import pandas as pd
from itables import show
from pathlib import Path
import plotly.express as px
from datetime import datetime
import plotly.graph_objects as go
from google.cloud import secretmanager
```

```{python}
# | include: false

# henter data
def find_git_root(start_path=None):
    if start_path is None:
        start_path = Path.cwd()  # Use current working directory instead of __file__
    current_path = Path(start_path).resolve()
    while current_path != current_path.parent:
        if (current_path / ".git").is_dir():
            return current_path
        current_path = current_path.parent
    return None


git_root = find_git_root()

with open(git_root / "data" / "hemmelighet_navn", "r", encoding="utf-8") as f:
    hemmelighet = f.read().strip()
secret_name = f"projects/230094999443/secrets/{hemmelighet}/versions/latest"
client = secretmanager.SecretManagerServiceClient()
response = client.access_secret_version(request={"name": secret_name})
secret = json.loads(response.payload.data.decode("UTF-8"))
connectionDVHP = oracledb.connect(
    user=secret.get("DB_USER"),
    host=secret.get("DB_HOST"),
    port=secret.get("DB_PORT"),
    password=secret.get("DB_PASSWORD"),
    service_name=secret.get("DB_SERVICE_NAME"),
)

sql_path = git_root / "sql" / "feilutbetalinger_per_mnd.sql"
with open(sql_path, "r", encoding="utf-8") as f:
    base_sql = f.read()

with connectionDVHP.cursor() as cursor:
    cursor.execute(base_sql)
    columns = [col[0].lower() for col in cursor.description]
    data = cursor.fetchall()
connectionDVHP.close()
df = pd.DataFrame(data, columns=columns)
print("Kolonner i df:\n" + "\n".join(f"- {col}" for col in df.columns))
print("Unike bostedsland i df:\n" + "\n".join(f"- {land}" for land in df["bosatt"].unique()))

# lager en df aggregert per år, dvs fjerner bosted
df_arlig = df.groupby("dod_ar").sum(numeric_only=True).reset_index()
```


```{python}
#| include: false

fig_arlig = go.Figure()
for col in df_arlig.columns:
    if col != 'dod_ar':
        fig_arlig.add_trace(go.Bar(
            x=df_arlig['dod_ar'],
            y=df_arlig[col],
            name=col.replace('_', ' '),
            visible='legendonly' if col != 'sum_feilutbetaling' else True
        ))

fig_arlig.update_layout(
    barmode='group',
    title_text='Feilutbetalinger per dødsår',
    xaxis_title='Dødsår',
    yaxis_title='Antall måneder eller antall saker',
    legend_title='Trykk for å vise/skjule',
)
```

```{python}
#| include: false

# new plot: dod_ar on x, bosatt as color, sum of feilutbetaling on y
fig_feilutbetalinger_dod_ar = px.bar(
    df,
    x="dod_ar",
    y="sum_feilutbetaling",
    barmode='group',
    color="bosatt",
    hover_name="bosatt",
    labels={"dod_ar": "Dødsår", "sum_feilutbetaling": "Sum feilutbetalte måneder, før evt tilbakekreving"},
)

for bosatt in df['bosatt'].unique():
    bosatt_data = df[df['bosatt'] == bosatt]
    fig_feilutbetalinger_dod_ar.add_bar(
        x=bosatt_data['dod_ar'],
        y=bosatt_data['antall_saker_uten_feil'],
        name=f"[{bosatt}] # saker uten feilutbetaling",
        marker_color='green',
        opacity=0.6,
        legendgroup=f"{bosatt}",
        visible='legendonly'
    )
    # Legg til antall saker med 1 feilutbetaling
    fig_feilutbetalinger_dod_ar.add_bar(
        x=bosatt_data['dod_ar'],
        y=bosatt_data['antall_saker_med_1_feil'],
        name=f"[{bosatt}] # saker med 1 feilutbetaling",
        marker_color='yellow',
        opacity=0.6,
        legendgroup=f"{bosatt}",
        visible='legendonly'
    )
    # Legg til antall saker med flere feilutbetalinger
    fig_feilutbetalinger_dod_ar.add_bar(
        x=bosatt_data['dod_ar'],
        y=bosatt_data['antall_saker_med_flere_feil'],
        name=f"[{bosatt}] # saker med flere feilutbetalinger",
        marker_color='orange',
        opacity=0.6,
        legendgroup=f"{bosatt}",
        visible='legendonly'
    )
    # Legg til antall feilutbetalte måneder i saker med flere feilutbetalinger
    fig_feilutbetalinger_dod_ar.add_bar(
        x=bosatt_data['dod_ar'],
        y=bosatt_data['sum_i_saker_med_flere_feil'],
        name=f"[{bosatt}] Sum feil i saker med flere feilutbetalinger",
        marker_color='red',
        opacity=0.6,
        legendgroup=f"{bosatt}",
        visible='legendonly'
    )
fig_feilutbetalinger_dod_ar.update_layout(
    title_text="Feilutbetalinger per dødsår og bosted – vis antall saker uten feilutbetaling ved å trykke i legend",
    barmode='group',
    xaxis=dict(categoryorder='category ascending')
)
```

```{python}
#| include: false

# plot med tilbakekrevinger
fig_tilbakekreving_vs_feilutbetaling = go.Figure()
fig_tilbakekreving_vs_feilutbetaling.add_trace(go.Bar(
    x=df['dod_ar'],
    y=df['sum_feilutbetaling'],
    name='Sum feilutbetalte måneder',
    marker_color='indianred',
    text=df['sum_feilutbetaling'],
    textposition='auto',
    offsetgroup=0,
    legendgroup='Feilutbetaling',
    hovertemplate='Dødsår: %{x}<br>Sum feilutbetalte måneder: %{y}<br>Bosted: %{customdata}<extra></extra>',
    customdata=df['bosatt']
))
fig_tilbakekreving_vs_feilutbetaling.add_trace(go.Bar(
    x=df['dod_ar'],
    y=df['sum_tilbakekreving'],
    name='Sum tilbakekrevde måneder',
    marker_color='lightseagreen',
    text=df['sum_tilbakekreving'],
    textposition='auto',
    offsetgroup=1,
    legendgroup='Tilbakekreving',
    hovertemplate='Dødsår: %{x}<br>Sum tilbakekrevde måneder: %{y}<br>Bosted: %{customdata}<extra></extra>',
    customdata=df['bosatt']
))
fig_tilbakekreving_vs_feilutbetaling.add_trace(go.Bar(
    x=df['dod_ar'],
    y=df['sum_feil_etter_tilbakekreving'],
    name='Sum feilutbetalte måneder etter tilbakekreving',
    marker_color='lightsalmon',
    text=df['sum_feil_etter_tilbakekreving'],
    textposition='auto',
    offsetgroup=2,
    legendgroup='Feil etter tilbakekreving',
    hovertemplate='Dødsår: %{x}<br>Sum feilutbetalte måneder etter tilbakekreving: %{y}<br>Bosted: %{customdata}<extra></extra>',
    customdata=df['bosatt']
))
fig_tilbakekreving_vs_feilutbetaling.update_layout(
    barmode='group',
    title_text='Feilutbetalinger vs tilbakekreving per dødsår',
    xaxis_title='Dødsår',
    yaxis_title='Antall måneder',
    legend_title='Kategori',
)
```

# plott

Work-in-progress! Obs! Bør først vise per år, og så per år og bosted.

Plottene under gir en initiell oversikt over muligefeilutbetalinger til døde alderspensjonister.
Merk at tallene er hentet fra PEN, så det er ikke koblet til faktiske feilutbetalinger.

```{python}
fig_arlig
```

```{python}
fig_feilutbetalinger_dod_ar
```


Dette andre plottet kobler sammen vedtak om tilbakekrevinger med feilutbetalinger.

```{python}
fig_tilbakekreving_vs_feilutbetaling
```

# tabell per år

```{python}
show(df_arlig, paging=False)
```

# tabell per år og bosted

```{python}
show(df, paging=False)
```

# sql

```{python}
print(base_sql)
```

# om

```{python}
print(f"""
Denne datafortellingen viser en initiell analyse av feilutbetalinger til døde alderspensjonister. 
Dataene her er hentet {datetime.now().strftime("%d.%m.%Y")} og vil utvikle seg over tid med flere registrerte dødsfall tilbake i tid.
I fanen "sql" kan du se sql-spørringen som er kjørt mot pen. Denne er aggregert på litt ulik vis for å få til plottene under.
""")
```
