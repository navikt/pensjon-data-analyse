---
title: "Analyse av feilutbetalinger til døde alderspensjonister"
jupyter: python3
execute:
    echo: false
    warning: false
    include: true
format:
    dashboard:
        embed-resources: true
        code-copy: true
        theme: flatly
---

```{python}
#| include: false
import os
import json
import oracledb
import pandas as pd
from itables import show
import plotly.express as px
from datetime import datetime
import plotly.graph_objects as go
from google.cloud import secretmanager
```

# Plott


```{python}
kjoretidspunkt = datetime.now().strftime("%d.%m.%Y")
print(f"""
Denne datafortellingen viser en initiell analyse av feilutbetalinger til døde alderspensjonister. 
Dataene her er hentet {kjoretidspunkt} og vil utvikle seg over tid med flere registrerte dødsfall tilbake i tid.
I fanen sql kan du se sql-spørringen som er kjørt mot pen. Denne er aggregert på litt ulik vis for å få til plottene under.

Her er er dataene mer usikre, fordi det ikke er filter på:
- ansv_saksbh = 'DødsfallBehandling'
- dato_vedtak >= to_date('01.01.2024', 'DD.MM.YYYY')

Fordi det er noe annerledes i databasen før behandlingen for dødsfall kom på plass
""")
```


```{python}
#| include: false

base_sql = """
-- feilutbetalinger_per_mnd
-- finner antall måneder med feilutbetalinger for saker
-- ser på diff mellom dato_vedtak og dato_virk_fom i vedtak om opphør

with

vedtak as (
    select
        p.dato_dod,
        case when (p.bostedsland = 161 or p.bostedsland is null) then 'nor' else 'utl' end as bosatt_norge,
        v.sak_id,
        v.vedtak_id,
        v.dato_vedtak,
        v.dato_virk_fom
        -- v.basert_pa_vedtak, -- vedtaket som var løpende
    from pen.t_vedtak v
    inner join pen.t_person p on p.person_id = v.person_id
    where
        1 = 1
        and v.k_sak_t = 'ALDER'
        and v.k_vedtak_t = 'OPPHOR'
        --and v.ansv_saksbh = 'DødsfallBehandling' -- todo: 'BPEN002' for før 2023??? noe skjedde i 2021/2022 med BPEN002
        and v.basert_pa_vedtak in (select vedtak_id from pen.t_vedtak where dato_lopende_tom is not null) --noqa
        -- filteret over fjerner saker som aldri har hatt et løpende vedtak, feks planlagte pensjoner
        and p.dato_dod <= v.dato_vedtak -- dødsfallet må ha skjedd før vedtaket. dette fjerner 12 vedtak fra 2024-2025
        and p.dato_dod is not null
        -- and v.dato_vedtak >= to_date('01.01.2024', 'DD.MM.YYYY')
),

finner_antall_mnd as (
    select
        months_between(trunc(dato_vedtak, 'MM'), dato_virk_fom) + 1 as mnd_feilutbet,
        bosatt_norge,
        dato_dod,
        to_char(dato_dod, 'YYYY') as dod_ar,
        sak_id,
        vedtak_id,
        dato_vedtak,
        dato_virk_fom
    from vedtak
),

finner_eventuell_tilbakekreving as (
    select
        finner_antall_mnd.*,
        v.vedtak_id as tilbakekreving_vedtak_id,
        v.k_sak_t as tilbakekreving_k_sak_t,
        v.dato_virk_fom as tilbakekreving_dato_virk_fom,
        v.dato_virk_tom as tilbakekreving_dato_virk_tom,

        months_between(v.dato_virk_tom + 1, v.dato_virk_fom) as mnd_tilbakekrevd
    from finner_antall_mnd
    left join pen.t_vedtak v
        on
            v.sak_id = finner_antall_mnd.sak_id
            and v.k_vedtak_t = 'TILBAKEKR'
            and v.k_vedtak_s = 'IVERKS'
            and v.k_sak_t = 'ALDER'
            and trunc(v.dato_virk_fom) >= finner_antall_mnd.dato_dod
)

select
    mnd_feilutbet,
    mnd_feilutbet - coalesce(mnd_tilbakekrevd, 0) as mnd_feil_etter_tilbkr,
    mnd_tilbakekrevd,
    -- tilbakekreving_dato_virk_fom,
    -- tilbakekreving_dato_virk_tom,
    dato_virk_fom,
    bosatt_norge,
    dato_dod,
    dod_ar,
    dato_vedtak
    -- sak_id,
    -- vedtak_id,
    -- tilbakekreving_vedtak_id,
from finner_eventuell_tilbakekreving
order by
    mnd_feilutbet desc,
    bosatt_norge desc
"""
```

```{python}
#| include: false

# henter data
hemmelighet = "pen-prod-lesekopien-pen_dataprodukt"
secret_name = f"projects/230094999443/secrets/{hemmelighet}/versions/latest"
client = secretmanager.SecretManagerServiceClient()
response = client.access_secret_version(request={"name": secret_name})
secret = json.loads(response.payload.data.decode("UTF-8"))
connectionDVHP = oracledb.connect(
    user=secret.get('DB_USER'),
    host=secret.get('DB_HOST'),
    port=secret.get('DB_PORT'),
    password=secret.get('DB_PASSWORD'),
    service_name=secret.get('DB_SERVICE_NAME')
)

with connectionDVHP.cursor() as cursor:
    cursor.execute(base_sql)
    columns = [col[0].lower() for col in cursor.description]
    data = cursor.fetchall()
connectionDVHP.close()
df = pd.DataFrame(data, columns=columns)

```

```{python}
#| include: false

# dummy-df
# mnd_feilutbet	bosatt_norge	dato_dod	dod_ar	dato_vedtak	   dato_virk_fom
# 	    4               nor	       2024-06-19	 2023	 2024-07-01	    2024-07-01
# 	    1               utl	       2024-02-20	 2024	 2024-02-20	    2024-03-01
# 	    0               utl	       2024-11-04	 2024	 2024-11-06	    2024-12-01
# 	    12              nor	       2025-05-05	 2025	 2025-05-19	    2025-06-01

agg_df = df.groupby(['mnd_feilutbet', 'bosatt_norge', 'dod_ar']).size().reset_index(name='antall_saker')
agg_df['sum_feilutbetaling'] = agg_df['antall_saker'] * agg_df['mnd_feilutbet']
agg_df['dod_ar+bosatt'] = agg_df['dod_ar'].astype(str) + ' - ' + agg_df['bosatt_norge']
agg_df = agg_df.sort_values(by='dod_ar+bosatt', ascending=False)
totalt_mnd_feilutbetaling = agg_df['sum_feilutbetaling'].sum()
totalt_saker_uten_feilutbetaling = agg_df[agg_df['mnd_feilutbet'] <= 0]['antall_saker'].sum()
```

```{python}
#| include: false

# new table:
# dod_ar, bosatt_norge, antall_saker_uten_feil, sum_feilutbetaling_mnd
summary_df = agg_df.groupby(['dod_ar', 'bosatt_norge']).agg(
    sum_feilutbetaling_mnd=('sum_feilutbetaling', 'sum'),
    antall_saker_med_1_feil=('antall_saker', lambda x: x[agg_df['mnd_feilutbet'] == 1].sum()),
    antall_saker_med_flere_feil=('antall_saker', lambda x: x[agg_df['mnd_feilutbet'] > 1].sum()),
    antall_saker_uten_feil=('antall_saker', lambda x: x[agg_df['mnd_feilutbet'] == 0].sum())
).reset_index()
summary_df = summary_df.sort_values(by=['dod_ar', 'bosatt_norge'], ascending=[False, False])
# Add a total row to summary_df
# Add total rows per 'nor', 'utl', and overall total
totals = []
for bosatt in ['nor', 'utl']:
    df_bosatt = summary_df[summary_df['bosatt_norge'] == bosatt]
    totals.append({
        'dod_ar': 'Totalt',
        'bosatt_norge': bosatt,
        'antall_saker_uten_feil': df_bosatt['antall_saker_uten_feil'].sum(),
        'antall_saker_med_1_feil': df_bosatt['antall_saker_med_1_feil'].sum(),
        'antall_saker_med_flere_feil': df_bosatt['antall_saker_med_flere_feil'].sum(),
        'sum_feilutbetaling_mnd': df_bosatt['sum_feilutbetaling_mnd'].sum()
    })
total_rows = pd.DataFrame(totals)
summary_df_total = pd.concat([summary_df, total_rows], ignore_index=True)

```

```{python}
show(summary_df_total, paging=False)
```

```{python}
#| include: false

# new plot: dod_ar on x, bosatt_norge as color, sum of feilutbetaling on y
fig_feilutbetalinger_dod_ar = px.bar(
    summary_df,
    x="dod_ar",
    y="sum_feilutbetaling_mnd",
    color="bosatt_norge",
    barmode='group',
    labels={"dod_ar": "Dødsår", "sum_feilutbetaling_mnd": "Sum feilutbetalte måneder"},
)
# Legg til antall saker uten feilutbetaling som ekstra barer
uten_feil = summary_df[summary_df['antall_saker_uten_feil'] > 0]
med_1_feil = summary_df[summary_df['antall_saker_med_1_feil'] > 0]
med_flere_feil = summary_df[summary_df['antall_saker_med_flere_feil'] > 0]

for bosatt in uten_feil['bosatt_norge'].unique():
    bosatt_data = uten_feil[uten_feil['bosatt_norge'] == bosatt]
    fig_feilutbetalinger_dod_ar.add_bar(
        x=bosatt_data['dod_ar'],
        y=bosatt_data['antall_saker_uten_feil'],
        name=f"Antall saker uten feilutbetaling ({bosatt})",
        marker_color='green',
        opacity=0.6,
        visible='legendonly'
    )
    # Legg til antall saker med 1 feilutbetaling
    med_1_feil_data = med_1_feil[med_1_feil['bosatt_norge'] == bosatt]
    fig_feilutbetalinger_dod_ar.add_bar(
        x=med_1_feil_data['dod_ar'],
        y=med_1_feil_data['antall_saker_med_1_feil'],
        name=f"Antall saker med 1 feilutbetaling ({bosatt})",
        marker_color='yellow',
        opacity=0.6,
        visible='legendonly'
    )
    # Legg til antall saker med flere feilutbetalinger
    med_flere_feil_data = med_flere_feil[med_flere_feil['bosatt_norge'] == bosatt]
    fig_feilutbetalinger_dod_ar.add_bar(
        x=med_flere_feil_data['dod_ar'],
        y=med_flere_feil_data['antall_saker_med_flere_feil'],
        name=f"Antall saker med flere feilutbetalinger ({bosatt})",
        marker_color='orange',
        opacity=0.6,
        visible='legendonly'
    )
fig_feilutbetalinger_dod_ar.update_layout(
    title_text="Feilutbetalinger per dødsår og bosted – vis antall saker uten feilutbetaling ved å trykke i legend",
    barmode='group',
    xaxis=dict(categoryorder='category ascending')
)
```

```{python}
#| include: false

# ser på antall tilbakekrevinger vs antall feilutbetalinger fra og med 2021
# plott årlig sum av: mnd_feilutbet, mnd_tilbakekrevd, mnd_feil_etter_tilbkr på dod_ar, med bosatt_norge som color
agg_df_tilbkr = df[df['dod_ar'] >= '2021'].groupby(['dod_ar', 'bosatt_norge']).agg(
    sum_mnd_feilutbet=('mnd_feilutbet', 'sum'),
    sum_mnd_tilbakekrevd=('mnd_tilbakekrevd', 'sum'),
    sum_mnd_feil_etter_tilbkr=('mnd_feil_etter_tilbkr', 'sum')
).reset_index()
fig_tilbakekreving_vs_feilutbetaling = go.Figure()
fig_tilbakekreving_vs_feilutbetaling.add_trace(go.Bar(
    x=agg_df_tilbkr['dod_ar'],
    y=agg_df_tilbkr['sum_mnd_feilutbet'],
    name='Sum feilutbetalte måneder',
    marker_color='indianred',
    text=agg_df_tilbkr['sum_mnd_feilutbet'],
    textposition='auto',
    offsetgroup=0,
    legendgroup='Feilutbetaling',
    hovertemplate='Dødsår: %{x}<br>Sum feilutbetalte måneder: %{y}<br>Bosted: %{customdata}<extra></extra>',
    customdata=agg_df_tilbkr['bosatt_norge']
))
fig_tilbakekreving_vs_feilutbetaling.add_trace(go.Bar(
    x=agg_df_tilbkr['dod_ar'],
    y=agg_df_tilbkr['sum_mnd_tilbakekrevd'],
    name='Sum tilbakekrevde måneder',
    marker_color='lightseagreen',
    text=agg_df_tilbkr['sum_mnd_tilbakekrevd'],
    textposition='auto',
    offsetgroup=1,
    legendgroup='Tilbakekreving',
    hovertemplate='Dødsår: %{x}<br>Sum tilbakekrevde måneder: %{y}<br>Bosted: %{customdata}<extra></extra>',
    customdata=agg_df_tilbkr['bosatt_norge']
))
fig_tilbakekreving_vs_feilutbetaling.add_trace(go.Bar(
    x=agg_df_tilbkr['dod_ar'],
    y=agg_df_tilbkr['sum_mnd_feil_etter_tilbkr'],
    name='Sum feilutbetalte måneder etter tilbakekreving',
    marker_color='lightsalmon',
    text=agg_df_tilbkr['sum_mnd_feil_etter_tilbkr'],
    textposition='auto',
    offsetgroup=2,
    legendgroup='Feil etter tilbakekreving',
    hovertemplate='Dødsår: %{x}<br>Sum feilutbetalte måneder etter tilbakekreving: %{y}<br>Bosted: %{customdata}<extra></extra>',
    customdata=agg_df_tilbkr['bosatt_norge']
))
fig_tilbakekreving_vs_feilutbetaling.update_layout(
    barmode='group',
    title_text='Feilutbetalinger vs tilbakekreving per dødsår',
    xaxis_title='Dødsår',
    yaxis_title='Antall måneder',
    legend_title='Kategori',
)
```



# sql

```{python}
print(base_sql)
```